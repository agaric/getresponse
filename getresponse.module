<?php

/**
 * @file
 * GetResponse module.
 *
 * @author Pawel Maslak <pawel.maslak@getresponse.com>
 * @author Grzegorz Struczynski <grzegorz.struczynski@getresponse.com>
 */

define('GETRESPONSE_URL_FEED', 'http://blog.getresponse.com/feed');
define('GETRESPONSE_STYLE_DRUPAL', 0);
define('GETRESPONSE_STYLE_WEBFORM', 1);

/**
 * Implements hook_help().
 */
function getresponse_help($path, $arg) {
  switch ($path) {
    case 'admin/help#getresponse':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Create highly targeted lists captured from among visitors to your Drupal site and blog. Simply create a web form matched to your brand and install it on your site in a few simple steps. With the new GetResponse-Drupal plug-in, it’s automatic. The plug-in enables your visitors to subscribe via a sign-up form as well as via comment. All you need to do is add an invitation line that will be displayed in the comment form, and their email address will be added to your GetResponse list automatically.');
      $output .= '<br/>' . t('To find out more about GetResponse, please visit: <a href="http://www.getresponse.com/about-us">http://www.getresponse.com/about-us</a>') . '</p>';
      $output .= '<h2>' . t('To install the plug-in, follow the guidelines below:') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('Install the GetResponse plug-in in your Drupal account by using the zip file.') . '</li>';
      $output .= '<li>' . t('Create a new web form in you GetResponse account.') . '</li>';
      $output .= '<li>' . t('Log in to Drupal and find plug-in setings.') . '</li>';
      $output .= '<li>' . t('Type in API key. Learn how to find API Key here: <a href="http://support.getresponse.com/faq/where-i-find-api-key">http://support.getresponse.com/faq/where-i-find-api-key</a>') . '</li>';
      $output .= '<li>' . t('Set sign-up details in Plug-in Settings widow') . '</li>';
      $output .= '<li>' . t('Last but not least, decide where the GetResponse web form should appear on your website. Click “Structure -> Blocks”, scroll down to the “Disabled” section and locate the pulldown menu beside the GetResponse WebForm plugin. Click to select the position where the web form should be shown.') . '</li>';
      $output .= '</ol>';
      $output .= '<p></p>';
      $output .= '<h3>' . t('To enable blog readers to subscribe to your GetResponse campaigns via blog comments, follow these instructions:') . '</h3>';
      $output .= '<p>' . t('Structure -> Content type -> content (e.g Article) -> edit -> Comment settings -> Anonymous commenting: -> Anonymous posters must leave their contact information.') . '</p>';
      $output .= '<p></p>';
      $output .= '<h3>' . t('How to allow anonymous comments?') . '</h3>';
      $output .= '<p>' . t('Make sure you have both the "access comments" and "post comments" permissions enabled for anonymous users. Can be found: People -> Permissions -> Comments.') . '</p>';
      $output .= '<p></p>';
      $output .= '<h3>' . t('How enable visitors to register accounts?') . '</h3>';
      $output .= '<p>' . t('Administration -> Configuration -> People -> Account settings, in section Registration and cancellation option "Visitors" or "Visitors, but administrator approval is required" should be checked.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function getresponse_menu() {
  $items = array();
  $items['admin/config/services/getresponse'] = array(
    'title' => 'GetResponse',
    'description' => 'Configuration for GetResponse module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getresponse_admin'),
    'access arguments' => array('administer getresponse'),
    'type' => MENU_IS_ROOT,
    'file' => 'getresponse.feed.inc',
  );
  $items['admin/config/services/getresponse/disconnect'] = array(
    'title' => 'Disconnect GetResponse',
    'description' => 'Disconnect GetResponse integration',
    'page arguments' => array('getresponse_disconnect'),
    'access arguments' => array('administer getresponse'),
    'type' => MENU_CALLBACK
  );
  $items['admin/config/services/getresponse/settings'] = array(
    'title' => 'GetResponse',
    'description' => 'Configuration for GetResponse module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getresponse_admin'),
    'access arguments' => array('administer getresponse'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'getresponse.feed.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function getresponse_permission() {
  return array(
    'administer getresponse' => array(
      'title' => t('Administer GetResponse module settings'),
      'restrict access' => TRUE,
    ),
  );
}

function getresponse_disconnect() {
  variable_del('getresponse_api_key');
  variable_del('getresponse_webformid');
  variable_del('getresponse_comment_on');
  variable_del('getresponse_comment_label');
  variable_del('getresponse_webformurl');
  variable_del('getresponse_comment_campaign');
  variable_del('getresponse_register_user');
  variable_del('getresponse_register_label');
  variable_del('getresponse_register_campaign');

  drupal_set_message(t('You disconnected your Drupal from GetResponse.'));
  drupal_goto('admin/config/services/getresponse');
}

/**
 * GetResponse Settings Page.
 */
function getresponse_admin() {

  require_once drupal_get_path('module',
      'getresponse') . '/getresponse-api.class.php';
  drupal_add_css(drupal_get_path('module', 'getresponse') . '/getresponse.css');
  drupal_add_js(drupal_get_path('module', 'getresponse') . '/getresponse.js');

  $api_key = variable_get('getresponse_api_key', '');

  $form = array(
    'left' => array(
      '#type' => 'item',
      '#prefix' => '<div class="gr-left-column">',
      '#suffix' => '</div>'
    ),
    'right' => array(
      '#type' => 'item',
      '#prefix' => '<div class="gr-right-column">',
      '#suffix' => '</div>'
    ),
  );

  $form['left']['account'] = array(
    '#type' => 'fieldset',
    '#title' => t('GetResponse Account'),
    '#weight' => 1,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('id' => 'edit-account')
  );

  if ($api_key) {
    $api = new GetResponse($api_key);
    $account = $api->accounts();

    $form['left']['account']['info'] = array(
      '#type' => 'item',
      '#value' => $account->firstName . ' ' . $account->lastName . ', ' . $account->email . '<br />' . $account->street . ', ' . $account->zipCode . ' ' . $account->city . ', ' . $account->countryCode->countryCode . '<br />' . $account->state . ', ' . $account->countryCode->countryCode . '<br />',
    );

    $api_button = l(
      t('Disconnect'),
      'admin/config/services/getresponse/disconnect',
      array(
        'attributes' => array(
          'id' => 'gr-disconnect-btn',
          'class' => 'button'
        )
      )
    );
  }
  else {

    $form['left']['account']['info'] = array(
      '#type' => 'item',
      '#value' => t('Enter your GetResponse API key to connect. When you connect, you\'ll have access to your campaigns and forms. All you need to get subscribers.') . '<br><br>',
    );

    $api_button = l(
      t('Connect'),
      'admin/config/services/getresponse',
      array(
        'attributes' => array(
          'id' => 'gr-connect',
          'class' => 'button'
        )
      )
    );
  }

  $form['left']['account']['getresponse_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' => $api_key,
    '#size' => 32,
    '#minlength' => 12,
    '#description' => $api_button
  );

  $form['left']['account']['api_key_info'] = array(
    '#type' => 'item',
    '#value' => '<br />' . t('You can find your API key in <a href="https://app.getresponse.com/manage_api.html" target="_blank">integration settings</a> of your GetResponse account.<br>Log in to GetResponse and go to <strong>My account > API & OAuth</strong> to find the key.') . '<br />' .
      '<div id="gr-disconnect-modal" class="hidden">' .
      '<h2 class="gr-modal-title">' . t('Are you sure you want to disconnect from GetResponse?') . '</h2>' .
      '<p>' . t('This stops new subscribtions via forms, comments,<br>or during account registration.') . '</p>' .
      '<div class="gr-modal-buttons">' .
      '<a id="gr-stay-connected" class="button gr-std-btn" href="#">' . t('Stay connected') . '</a>' .
      '<a class="button gr-red-btn" id="gr-disconnect-confirm" href="#">' . t('Yes, disconnect') . '</a>' .
      '</div>' .
      '</div>'
  );

  if ($api_key) {

    $form['left']['settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('How do you want to get subscribers?'),
      '#weight' => 2,
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attributes' => array('id' => 'edit-left')
    );

    $api = new GetResponse($api_key);
    $c = array();
    $campaigns = $api->getCampaigns();

    $old_webform_ids = $new_webform_ids = array();
    if (!empty($campaigns)) {

      foreach ($campaigns as $v) {
        $c[$v->campaignId] = $v->name;
      }

      $webforms = $api->getWebforms();

      foreach ($webforms as $id => $webform) {
        if ('enabled' == $webform->status) {
          $old_webform_ids[$webform->webformId] = $webform->name . ' (' . $c[$webform->campaign->campaignId] . ')';
        }
      }

      $webforms = $api->getForms();

      foreach ($webforms as $id => $webform) {
        if ('published' == $webform->status) {
          $new_webform_ids[$webform->formId] = $webform->name . ' (' . $c[$webform->campaign->campaignId] . ')';
        }
      }
    }

    $form['left']['settings']['title1'] = array(
      '#type' => 'item',
      '#value' => '<br /><h3>' . t('Subscribe via a form') . '</h3>',
    );

    if (!empty($new_webform_ids) || !empty($old_webform_ids)) {
      $form['left']['settings']['getresponse_webform_on'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow subscriptions via forms'),
        '#default_value' => variable_get('getresponse_webform_on', 0)
      );

      if (!empty($new_webform_ids) && !empty($old_webform_ids)) {
        $form_options = array(
          t('New webforms') => $new_webform_ids,
          t('Old webforms') => $old_webform_ids
        );
      } else {
        $form_options = array_merge($new_webform_ids, $old_webform_ids);
      }

        $form['left']['settings']['getresponse_webformid'] = array(
        '#type' => 'select',
        '#title' => t('Select the form'),
        '#default_value' => variable_get('getresponse_webformid', ''),
        '#options' => $form_options,
        '#description' => '<small>' . t('The list is automatically grabbed from your GetResponse account.') . '</small>'
      );

      $form['left']['settings']['forms_hint'] = array(
        '#type' => 'item',
        '#value' => '<div><a class="gr-hint" href="#gr-hint-forms">' . t('Need help with forms?') . '</a><div id="gr-hint-forms" class="hidden"><strong>' . t('How to place the form?') . '</strong><br>' . t('Select the form and go to') . ' <strong>' . t('Administer > Site Building > Blocks') . '</strong> ' . t('to place it on chosen position.') . '</div></div>',
      );
    }
    else {
      $form['left']['settings']['getresponse_webformid'] = array(
        '#type' => 'item',
        '#value' => t('Looks like you don’t have any forms. <a href="https://app.getresponse.com/webform_manage.html" target="_blank">Create a form</a>.'),
      );
    }

    $form['left']['settings']['title2'] = array(
      '#type' => 'item',
      '#value' => '<br /><h3>' . t('Subscribe via comments') . '</h3>',
    );

    if (!empty($campaigns)) {

      $form['left']['settings']['getresponse_comment_on'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow subscriptions when visitors comment'),
        '#default_value' => variable_get('getresponse_comment_on', 0)
      );

      $campaign_ids = array();
      foreach ($campaigns as $id => $campaign) {
        $campaign_ids[$campaign->campaignId] = $campaign->name;
      }

      $form['left']['settings']['getresponse_comment_campaign'] = array(
        '#type' => 'select',
        '#title' => t('Select the campaign'),
        '#default_value' => variable_get('getresponse_comment_campaign', ''),
        '#options' => $campaign_ids,
        '#description' => '<small>' . t('The list is automatically grabbed from your GetResponse account.') . '</small>'
      );

      $form['left']['settings']['getresponse_comment_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Enter signup message'),
        '#default_value' => variable_get('getresponse_comment_label',
          t('Sign up for our newsletter!')),
        '#size' => 32,
        '#minlength' => 7
      );

      $form['left']['settings']['comment_hint'] = array(
        '#type' => 'item',
        '#value' => '<div><a class="gr-hint" href="#gr-hint-comm">' . t('Need help with comments?') . '</a><div id="gr-hint-comm" class="hidden"><strong>' .
          t('How do I allow anonymous comments?') . '</strong><br>' . t('You need to enable "view comments" and "post comments" permissions for anonymous users.') . ' ' . t('Go to') . ' <strong>' . t('Administer > User management > Permissions > Comment module') . '</strong>' . ' ' . t('to set this.') .
          '<br /><br /><strong>' . t('How to add email field to comments?') . '</strong><br /><strong>' . t('Administer > Content management > Content types > content (e.g Article) > edit > Comment settings > Anonymous commenting: > Anonymous posters must leave their contact information.') . '</strong></div></div>',
      );

      $form['left']['settings']['title3'] = array(
        '#type' => 'item',
        '#value' => '<br /><h3>' . t('Subscribe via registration form') . '</h3>',
      );

      $form['left']['settings']['getresponse_register_user'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow subscriptions when visitors register'),
        '#default_value' => variable_get('getresponse_register_user', 0),
        '#attributes' => array('class' => 'type-checkbox')
      );

      $form['left']['settings']['getresponse_register_campaign'] = array(
        '#type' => 'select',
        '#title' => t('Select the campaign'),
        '#default_value' => variable_get('getresponse_register_campaign', ''),
        '#options' => $campaign_ids,
        '#description' => '<small>' . t('The list is automatically grabbed from your GetResponse account.') . '</small>'
      );

      $form['left']['settings']['getresponse_register_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Enter signup message'),
        '#default_value' => variable_get('getresponse_register_label',
          t('Sign up for our newsletter!')),
        '#size' => 32,
        '#minlength' => 7
      );

      $form['left']['settings']['register_hint'] = array(
        '#type' => 'item',
        '#value' => '<div><a class="gr-hint" href="#gr-hint-reg">' . t('Need help with registration?') . '</a><div id="gr-hint-reg" class="hidden"><strong>' . t('How do I enable account registration for all visitors?') . '</strong><br>' . t('Go to') . ' <strong>' . t('Administration > Configuration > People > Account settings.') . '</strong> <br>' . t('In the Registration and cancellation section select Visitors, but administrator approval is required.') . '</div></div>',
      );
    }
    else {
      $form['left']['settings']['no_campaigns'] = array(
        '#type' => 'item',
        '#value' => t('No Campaigns'),
      );
    }
  }

  $form['right']['rss'] = array(
    '#type' => 'fieldset',
    '#title' => t('Check out what\'s new on our blog'),
    '#weight' => 3,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $rss = new GetResponseRss();

  $form['right']['rss']['content'] = array(
    '#type' => 'item',
    '#value' => $rss->renderRss(10),
  );

  $form['right']['social'] = array(
    '#type' => 'fieldset',
    '#title' => t('Follow GetResponse'),
    '#weight' => 4,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['right']['social']['facebook'] = array(
    '#type' => 'item',
    '#value' => l(t('Facebook'), 'http://www.facebook.com/getresponse', array(
      'attributes' => array(
        'class' => 'GR_ico sprite facebook-ico',
      ),
    ))
  );

  $form['right']['social']['twitter'] = array(
    '#type' => 'item',
    '#value' => l(t('Twitter'), 'http://twitter.com/getresponse', array(
      'attributes' => array(
        'class' => 'GR_ico sprite twitter-ico',
      ),
    ))
  );

  $form['right']['social']['linkedin'] = array(
    '#type' => 'item',
    '#value' => l(t('LinkedIn'), 'https://www.linkedin.com/company/getresponse',
      array(
        'attributes' => array(
          'class' => 'GR_ico sprite linkedin-ico',
        ),
      )),
  );

  $form['right']['social']['blog'] = array(
    '#type' => 'item',
    '#value' => l(t('Blog'), 'http://blog.getresponse.com', array(
      'attributes' => array(
        'class' => 'GR_ico sprite blog-ico',
      ),
    ))
  );

  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );

  if (!empty($_POST) && !empty($api_key)) {
    unset($_SESSION['messages']);
    drupal_set_message(t('Subscription settings successfully saved.'));
  }

  $form['buttons']['submit']['#value'] = t('Save subscription settings');

  return $form;
}

/**
 * Implements hook_admin_validate().
 *
 * @param $form
 * @param $form_state
 */
function getresponse_admin_validate($form, &$form_state) {

  $current_api_key = variable_get('getresponse_api_key', '');

  if (isset($form_state['values']['getresponse_api_key']) && empty($form_state['values']['getresponse_api_key'])) {
    form_set_error('getresponse_api_key', t('API key can not be empty'));
  }
  else {
    $apikey = $form_state['values']['getresponse_api_key'];
    $api = new GetResponse($apikey);
    $webform = NULL;
    $ping = $api->ping();

    if (isset($ping->code)) {
      variable_del('getresponse_api_key');
      unset($form_state['values']['getresponse_api_key']);
      form_set_error('getresponse_api_key',
        t('The API key seems incorrect. Please check if you typed or pasted it correctly. If you recently generated a new key, please make sure you’re using the right one.'));
    }
    else {
      variable_set('getresponse_api_key', $apikey);

      if (isset($form_state['values']['getresponse_webformid'])) {

        if (isset($form_state['values']['getresponse_comment_campaign'])) {
          variable_set('getresponse_comment_campaign',
            $form_state['values']['getresponse_comment_campaign']);
        }

        if (isset($form_state['values']['getresponse_register_user'])) {
          variable_set('getresponse_register_user',
            $form_state['values']['getresponse_register_user']);
        }

        if (isset($form_state['values']['getresponse_register_campaign'])) {
          variable_set('getresponse_register_campaign',
            $form_state['values']['getresponse_register_campaign']);
        }

        if (isset($form_state['values']['getresponse_register_label'])) {
          variable_set('getresponse_register_label',
            $form_state['values']['getresponse_register_label']);
        }

        if (isset($form_state['values']['getresponse_comment_label'])) {
          variable_set('getresponse_comment_label',
            $form_state['values']['getresponse_comment_label']);
        }

        if (isset($form_state['values']['getresponse_comment_on'])) {
          variable_set('getresponse_comment_on',
            $form_state['values']['getresponse_comment_on']);
        }

        if (isset($form_state['values']['getresponse_webform_on'])) {
          variable_set('getresponse_webform_on',
            $form_state['values']['getresponse_webform_on']);
        }

        if (isset($form_state['values']['getresponse_webformid'])) {
          variable_set('getresponse_webformid',
            $form_state['values']['getresponse_webformid']);
        }

        $webform_id = $form_state['values']['getresponse_webformid'];

        $webform = $api->getForm($webform_id);

        if (!isset($webform->formId)) {
          $webform = $api->getWebform($webform_id);
        }
      }

      if ($webform && !empty($webform->scriptUrl)) {
        variable_set('getresponse_webformurl', $webform->scriptUrl);
      }
      else {
        variable_del('getresponse_webformurl');
      }

      if (empty($current_api_key)) {
        drupal_set_message(t('You connected your Drupal to GetResponse.'));
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function getresponse_block_info() {
  $blocks = array();
  $blocks['webform'] = array(
    'info' => t('GetResponse WebForm'),
    'status' => TRUE,
    'region' => 'sidebar_first',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implementation of hook_node_info().
 */
function getresponse_node_info() {
  return array(
    'customblock' => array(
      'name' => t('Custom Block'),
      'module' => 'customblock',
      'description' => t('How to create a custom Block.'),
    )
  );
}

/**
 * Implementation of hook_block().
 *
 * @param string $op
 * @param int $delta
 * @return mixed
 */
function getresponse_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    return array(array('info' => t('GetResponse Web Form')));
  }
  else {
    if ($op == 'view') {
      $block = array('content' => '');
      $webform_url = variable_get('getresponse_webformurl', '');
      $webform_on = variable_get('getresponse_webform_on', 0);

      if (!empty($webform_url) && $webform_on == 1) {
        $block['content'] .= '<noscript>' . t("Please enable JavaScript to use the GetResponse service.") . '</noscript>';
        $block['content'] .= '<script type="text/javascript" src="' . $webform_url . '"></script>';
      }

      return $block;
    }
  }
}

/**
 * Implements hook_form_comment_form_alter().
 *
 * @param $form
 * @param $form_state
 */
function getresponse_form_comment_form_alter(&$form, &$form_state) {

  $comment_on = variable_get('getresponse_comment_on', 0);

  if ($comment_on && isset($form_state['post']) && isset($form_state['post']['getresponse_comment_checkbox'])) {
    $api_key = variable_get('getresponse_api_key', '');
    $campaign_id = variable_get('getresponse_comment_campaign', '');
    $comment_on = variable_get('getresponse_comment_on', '0');

    if (!empty($api_key) && !empty($campaign_id) && $comment_on && isset($form_state['post']['mail']) && !empty($form_state['post']['mail'])) {
      require_once drupal_get_path('module',
          'getresponse') . '/getresponse-api.class.php';
      $api = new GetResponse($api_key);

      $api->addContact(array(
        'name' => $form_state['post']['name'],
        'email' => $form_state['post']['mail'],
        'campaign' => array('campaignId' => $campaign_id)
      ));
    }
  }

  if (!user_is_logged_in() && $comment_on && isset($form['mail'])) {
    $form['getresponse_comment_checkbox'] = array(
      '#type' => 'checkbox',
      '#title' => variable_get('getresponse_comment_label',
        t('Sign up for our newsletter!')),
      '#default_value' => 0,
      '#weight' => 3,
    );
  }
}

/**
 * Implements hook_form_commons_core_join_form_alter().
 *
 * @param $form
 * @param $form_state
 */
function getresponse_form_commons_core_join_form_alter(&$form, &$form_state) {
  $api_key = variable_get('getresponse_api_key', '');
  $campaign_id = variable_get('getresponse_register_campaign', '');
  $register_on = variable_get('getresponse_register_user', 0);

  if (!empty($api_key) && $register_on && !empty($campaign_id)) {
    if (isset($form_state['post']) && isset($form_state['post']['getresponse_comment_checkbox'])) {
      if (isset($form_state['post']['mail']) && !empty($form_state['post']['mail'])) {
        require_once drupal_get_path('module',
            'getresponse') . '/getresponse-api.class.php';

        $api = new GetResponse($api_key);

        $api->addContact(array(
          'name' => $form_state['post']['name'],
          'email' => $form_state['post']['mail'],
          'campaign' => array('campaignId' => $campaign_id)
        ));
      }
    }

    if (!user_is_logged_in()) {
      $form['getresponse_comment_checkbox'] = array(
        '#type' => 'checkbox',
        '#title' => variable_get('getresponse_register_label',
          t('Sign up for our newsletter!')),
        '#default_value' => 0,
        '#weight' => 5,
      );
      $form['submit']['#weight'] = 6;
    }
  }
}

/**
 * Implements hook_form_user_register_alter().
 *
 * @param $form
 * @param $form_state
 */
function getresponse_form_user_register_alter(&$form, &$form_state) {
  $api_key = variable_get('getresponse_api_key', '');
  $campaign_id = variable_get('getresponse_register_campaign', '');
  $register_on = variable_get('getresponse_register_user', 0);

  if (!empty($api_key) && $register_on && !empty($campaign_id)) {
    if (isset($form_state['post']) && isset($form_state['post']['getresponse_comment_checkbox'])) {
      if (isset($form_state['post']['mail']) && !empty($form_state['post']['mail'])) {
        require_once drupal_get_path('module',
            'getresponse') . '/getresponse-api.class.php';
        $api = new GetResponse($api_key);

        $api->addContact(array(
          'name' => $form_state['post']['name'],
          'email' => $form_state['post']['mail'],
          'campaign' => array('campaignId' => $campaign_id)
        ));
      }
    }

    if (!user_is_logged_in()) {
      $form['newsletter'] = array(
        '#type' => 'fieldset',
        '#title' => t('Newsletter'),
        '#weight' => 3,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );
      $form['newsletter']['getresponse_comment_checkbox'] = array(
        '#type' => 'checkbox',
        '#title' => variable_get('getresponse_register_label',
          t('Sign up for our newsletter!')),
        '#default_value' => 0,
      );
    }
  }
}
