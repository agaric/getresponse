<?php

/**
 * @file
 * GetResponse module.
 *
 * @author Pawel Maslak <pawel.maslak@getresponse.com>
 * @author Grzegorz Struczynski <grzegorz.struczynski@getresponse.com>
 */

define('GETRESPONSE_URL_FEED', 'http://blog.getresponse.com/feed');
define('GETRESPONSE_STYLE_DRUPAL', 0);
define('GETRESPONSE_STYLE_WEBFORM', 1);

/**
 * Implements hook_help().
 */
function getresponse_help($path, $arg) {
  switch ($path) {
    case 'admin/help#getresponse':
      $output = '';
      $output .= '<h3>' . t("About") . '</h3>';
      $output .= '<p>' . t("This plug-in/module enables installation of a GetResponse fully customizable sign up form on your Drupal site.");
      $output .= '<br/>' . t("To find out more about GetResponse, please visit: <a href='http://www.getresponse.com/about-us'>http://www.getresponse.com/about-us</a>") . '</p>';
      $output .= '<h2>' . t("To use GetResponse web forms on a Drupal web page, follow these instructions:") . '</h3>';
      $output .= '<ol>';
      $output .= '<p><strong>' . t("In GetResponse, find the WID tag.") . '</strong></p>';
      $output .= '<li>' . t("Log in to your GetResponse account.") . '</li>';
      $output .= '<li>' . t("Create a new web form by clicking Web Forms -> Create new or choose an existing web form by clicking Web Forms -> Web Forms list.") . '</li>';
      $output .= '<li>' . t("If you are designing a new form, advance to the “Publish” screen and scroll down to view the HTML code. If you are using an existing form, click Web Forms -> Web Forms list then click the “view source” link for the form you select.") . '</li>';
      $output .= '<li>' . t("In the HTML code, find the URL of the Web Form and copy the WID number. It's the number that follows “WID=”.") . '</li>';
      $output .= '<p><strong>' . t("In Drupal, enter the GetResponse WID tag.") . '</strong></p>';
      $output .= '<li>' . t("To change the layout of the web form on your Drupal page, log in to your Drupal admin account. Go to “Configuration”, scroll down to the Web Services section and click “GetResponse”.") . '</li>';
      $output .= '<li>' . t("In the Web form ID field, enter the WID tag you found in your GetResponse web form editor page.") . '</li>';
      $output .= '<li>' . t("In the “Style” pulldown menu, choose the GetResponse layout or the Drupal standard layout for web forms.") . '</li>';
      $output .= '<li>' . t("Last but not least, decide where the GetResponse web form should appear on your website. Click “Structure -> Blocks”, scroll down to the “Disabled” section and locate the pulldown menu beside the GetResponse WebForm plugin. Click to select the position where the web form should be shown. ") . '</li>';
      $output .= '</ol>';
      $output .= '<p></p>';
      $output .= '<h3>' . t("To enable blog readers to subscribe to your GetResponse campaigns via blog comments, follow these instructions:") . '</h3>';
      $output .= '<ol>';
      $output .= '<p><strong>' . t("In GetResponse, find the WID tag.") . '</strong></p>';
      $output .= '<li>' . t("Log in to your GetResponse account.") . '</li>';
      $output .= '<li>' . t("Create a new web form by clicking Web Forms -> Create new or choose an existing web form by clicking Web Forms -> Web Forms list.") . '</li>';
      $output .= '<li>' . t("If you are designing a new form, advance to the “Publish” screen and scroll down to view the HTML code. If you are using an existing form, click Web Forms -> Web Forms list then click the “view source” link for the form you select.") . '</li>';
      $output .= '<li>' . t("In the HTML code, find the URL of the Web Form and copy the WID number. It's the number that follows “WID=”.") . '</li>';
      $output .= '<p><strong>' . t("In Drupal, enter the GetResponse WID tag.") . '</strong></p>';
      $output .= '<li>' . t("In the “Web form ID” field, enter the WID tag you found in your GetResponse web form editor page.") . '</li>';
      $output .= '<li>' . t("Click “Configuration”, scroll down to the Web Services section, and make sure “Comment integration” at “Subscribe via Comment” is switched ON.") . '</li>';
      $output .= '<li>' . t("In the line below “Additional text”, choose a call-to-action sentence") . '</li>';
      $output .= '<li>' . t("To activate the commenting function, click “Structure -> Content types”. You can either create a new content type or click “edit” at an existing one. Find the appropriate options in the lower left corner of the “Comment settings” tab. It's important that the “Anonymous commenting” pulldown menu is activated on “Anonymous posters must leave their contact 
information”.") . '</li>';
      $output .= '</ol>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function getresponse_menu() {
  $items = array();
  $items['admin/config/services/getresponse'] = array(
    'title' => 'GetResponse',
    'description' => 'Configuration for GetResponse module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getresponse_admin'),
    'access arguments' => array('administer getresponse'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'getresponse.feed.inc',
  );
  $items['admin/config/services/getresponse/disconnect'] = array(
    'title' => 'Disconnect GetResponse',
    'description' => 'Disconnect GetResponse integration',
    'page arguments' => array('getresponse_disconnect'),
    'access arguments' => array('administer getresponse'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function getresponse_permission() {
  return array(
    'administer getresponse' => array(
      'title' => t('Administer GetResponse module settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * GetResponse disconnect action.
 */
function getresponse_disconnect() {
  variable_del('getresponse_api_key');
  variable_del('getresponse_webformid');
  variable_del('getresponse_comment_on');
  variable_del('getresponse_comment_label');
  variable_del('getresponse_webformurl');
  variable_del('getresponse_comment_campaign');
  variable_del('getresponse_register_user');
  variable_del('getresponse_register_label');
  variable_del('getresponse_register_campaign');

  drupal_set_message(t('You disconnected your Drupal from GetResponse.'));
  drupal_goto('admin/config/services/getresponse');
}

/**
 * GetResponse Settings Page.
 */
function getresponse_admin() {

  require_once('getresponse-api.class.php');

  $api_key = variable_get('getresponse_api_key');
  $form = array(
    'left' => array(
      '#type' => 'item',
      '#prefix' => '<div class="gr-left-column">',
      '#suffix' => '</div>'
    ),
    'right' => array(
      '#type' => 'item',
      '#prefix' => '<div class="gr-right-column">',
      '#suffix' => '</div>'
    ),
  );

  $form['left']['account'] = array(
    '#type' => 'fieldset',
    '#title' => t('GetResponse Account'),
    '#weight' => 1,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('id' => 'edit-account')
  );

  if ($api_key) {
    $api = new GetResponse($api_key);
    $account = $api->accounts();

    $form['left']['account']['info'] = array(
      '#type' => 'item',
      '#markup' => $account->firstName . ' ' . $account->lastName . ', ' . $account->email . '<br />' . $account->street . ', ' . $account->zipCode . ' ' . $account->city . ', ' . $account->countryCode->countryCode . '<br />' . $account->state . ', ' . $account->countryCode->countryCode . '<br />',
    );

    $api_button = l(
      t('Disconnect'),
      'admin/config/services/getresponse/disconnect',
      array(
        'attributes' => array(
          'id' => 'gr-disconnect-btn',
          'class' => array('button')
        )
      )
    );
  }
  else {

    $form['left']['account']['info'] = array(
      '#type' => 'item',
      '#markup' => t('Enter your GetResponse API key to connect. When you connect, you\'ll have access to your campaigns and forms. All you need to get subscribers.') . '<br><br>',
    );

    $api_button = l(
      t('Connect'),
      'admin/config/services/getresponse',
      array(
        'attributes' => array(
          'class' => array('button'),
          'id' => 'gr-connect'
        )
      )
    );
  }

  $form['left']['account']['getresponse_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' => $api_key,
    '#size' => 32,
    '#minlength' => 12,
    '#description' => $api_button
  );

  $form['left']['account']['api_key_info'] = array(
    '#type' => 'item',
    '#markup' => '<br />' . t('You can find your API key in <a href="https://app.getresponse.com/manage_api.html" target="_blank">integration settings</a> of your GetResponse account.<br>Log in to GetResponse and go to <strong>My account > API & OAuth</strong> to find the key.') . '<br />' .
      '<div id="gr-disconnect-modal" class="hidden">' .
      '<h2 class="gr-modal-title">' . t('Are you sure you want to disconnect from GetResponse?') . '</h2>' .
      '<p>' . t('This stops new subscribtions via forms, comments,<br>or during account registration.') . '</p>' .
      '<div class="gr-modal-buttons">' .
      '<a id="gr-stay-connected" class="button gr-std-btn" href="#">' . t('Stay connected') . '</a>' .
      '<a class="button gr-red-btn" id="gr-disconnect-confirm" href="#">' . t('Yes, disconnect') . '</a>' .
      '</div>' .
      '</div>'
  );

  if ($api_key) {

    $form['left']['settings'] = array(
      '#type' => 'fieldset',
      '#title' => t("How do you want to get subscribers?"),
      '#weight' => 2,
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );

    $api = new GetResponse($api_key);
    $campaigns = $api->getCampaigns();

    $old_webform_ids = $new_webform_ids = $c = array();
    if (!empty($campaigns)) {

      foreach ($campaigns as $v) {
          $c[$v->campaignId] = $v->name;
      }

      $webforms = $api->getWebforms();

      foreach ($webforms as $id => $webform) {
        if ('enabled' == $webform->status) {
          $old_webform_ids[$webform->webformId] = $webform->name . ' (' . $c[$webform->campaign->campaignId] . ')';
        }
      }

      $webforms = $api->getForms();

      foreach ($webforms as $id => $webform) {
        if ('published' == $webform->status) {
          $new_webform_ids[$webform->formId] = $webform->name . ' (' . $c[$webform->campaign->campaignId] . ')';
        }
      }
    }

    $form['left']['settings']['title1'] = array(
    '#type' => 'item',
    '#markup' => '<h3>' . t("Subscribe via a form") . '</h3>',
    );

    if (!empty($new_webform_ids) || !empty($old_webform_ids)) {

      $form['left']['settings']['getresponse_webform_on'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow subscriptions via forms'),
        '#default_value' => variable_get('getresponse_webform_on', 0)
      );

      if (!empty($new_webform_ids) && !empty($old_webform_ids)) {
        $form_options = array(
          t('New webforms') => $new_webform_ids,
          t('Old webforms') => $old_webform_ids
        );
      } else {
        $form_options = array_merge($new_webform_ids, $old_webform_ids);
      }

      $form['left']['settings']['getresponse_webformid'] = array(
        '#type' => 'select',
        '#title' => t("Select the form"),
        '#default_value' => variable_get('getresponse_webformid'),
        '#options' => $form_options,
        '#description' => '<small>' . t('The list is automatically grabbed from your GetResponse account.') . '</small>'
      );

      $form['left']['settings']['forms_hint'] = array(
        '#type' => 'item',
        '#markup' => '<div><a class="gr-hint" href="#gr-hint-forms">' . t('Need help with forms?') . '</a><div id="gr-hint-forms" class="hidden"><strong>' . t('How to place the form?') . '</strong><br>' . t('Select the form and go to <strong>Structure > Blocks</strong> to place it on chosen position.') . '</div></div>',
      );
    }
    else {
      $form['left']['settings']['getresponse_no_webformid'] = array(
        '#type' => 'item',
        '#markup' => t('Looks like you don’t have any forms. <a href="https://app.getresponse.com/webform_manage.html" target="_blank">Create a form</a>.'),
      );
    }

    $form['left']['settings']['title2'] = array(
    '#type' => 'item',
    '#markup' => '<br /><h3>' . t("Subscribe via comments") . '</h3>',
    );

    if (!empty($campaigns)) {
      $form['left']['settings']['getresponse_comment_on'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow subscriptions when visitors comment'),
        '#default_value' => variable_get('getresponse_comment_on', 0)
      );
     
      $campaign_ids = array();
      foreach ($campaigns as $id => $campaign) {
        $campaign_ids[$campaign->campaignId] = $campaign->name;
      }
     
      $form['left']['settings']['getresponse_comment_campaign'] = array(
        '#type' => 'select',
        '#title' => t("Select the campaign"),
        '#default_value' => variable_get('getresponse_comment_campaign', ''),
        '#options' => $campaign_ids,
        '#description' => '<small>' . t('The list is automatically grabbed from your GetResponse account.') . '</small>'
      );
     
      $form['left']['settings']['getresponse_comment_label'] = array(
      '#type' => 'textfield',
      '#title' => t("Enter signup message"),
      '#default_value' => variable_get('getresponse_comment_label', t("Sign up for our newsletter!")),
      '#size' => 0,
      '#minlength' => 7,
      );

      $form['left']['settings']['comment_hint'] = array(
        '#type' => 'item',
        '#markup' => '<div><a class="gr-hint" href="#gr-hint-comm">' . t('Need help with comments?') . '</a><div id="gr-hint-comm" class="hidden">' .
          '<strong>' . t("How do I allow anonymous comments?") . '</strong><br />' . t('You need to enable “view comments” and “post comments” permissions for anonymous users.') . '<br>' . t('Go to ') .'<strong>' . t('People > Permissions > Comments') . '</strong> ' . t('to set this.') . '<br />' .
          '<br /><strong>' . t("How to add email field to comments?") . '</strong><br /><strong>' . t("Structure > Content type > content (e.g Article) > edit > Comment settings > Anonymous commenting: > Anonymous posters must leave their contact information.") . '</strong><br />'
      );

      $form['left']['settings']['title3'] = array(
        '#type' => 'item',
        '#markup' => '<br /><h3>' . t('Subscribe via registration form') . '</h3>',
      );

      $form['left']['settings']['getresponse_register_user'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow subscriptions when visitors register'),
        '#default_value' => variable_get('getresponse_register_user', 0),
        '#attributes' => array('class' => array('type-checkbox'))
      );

      $form['left']['settings']['getresponse_register_campaign'] = array(
        '#type' => 'select',
        '#title' => t('Select the campaign'),
        '#default_value' => variable_get('getresponse_register_campaign', ''),
        '#options' => $campaign_ids,
        '#description' => '<small>' . t('The list is automatically grabbed from your GetResponse account.') . '</small>'
      );

      $form['left']['settings']['getresponse_register_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Enter signup message'),
        '#default_value' => variable_get('getresponse_register_label',
          t('Sign up for our newsletter!')),
        '#size' => 32,
        '#minlength' => 7
      );

      $form['left']['settings']['register_hint'] = array(
        '#type' => 'item',
        '#markup' => '<div><a class="gr-hint" href="#gr-hint-reg">' . t('Need help with registrations?') . '</a><div id="gr-hint-reg" class="hidden"><strong>' . t('How do I enable account registration for all visitors?') . '</strong><br>' . t('Go to') . ' <strong>' . t('Administration > Configuration > People > Account settings.') . '</strong><br>' . t('In the Registration and cancellation section select Visitors, but administrator approval is required.') . '</div></div>',
      );
    }
    else {
      $form['left']['settings']['no_campaigns'] = array(
        '#type' => 'item',
        '#markup' => t("No Campaigns"),
      );
    }
  }

  $form['right']['rss'] = array(
    '#type' => 'fieldset',
    '#title' => t("Check out what's new on our blog"),
    '#weight' => 2,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $rss = new GetResponseRss();

  $form['right']['rss']['content'] = array(
    '#type' => 'item',
    '#markup' => $rss->renderRss(10),
  );

  $form['right']['social'] = array(
    '#type' => 'fieldset',
    '#title' => t("Follow GetResponse"),
    '#weight' => 3,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['right']['social']['facebook'] = array(
    '#type' => 'item',
    '#markup' => l(t("Facebook"), 'http://www.facebook.com/getresponse', array(
      'attributes' => array(
        'class' => array('GR_ico', 'sprite', 'facebook-ico'),
      ),
    )),
  );

  $form['right']['social']['twitter'] = array(
    '#type' => 'item',
    '#markup' => l(t("Twitter"), 'http://twitter.com/getresponse', array(
      'attributes' => array(
        'class' => array('GR_ico', 'sprite', 'twitter-ico'),
      ),
    )),
  );

  $form['right']['social']['linkedin'] = array(
    '#type' => 'item',
    '#markup' => l(t("LinkedIn"), 'http://www.linkedin.com/company/getresponse', array(
      'attributes' => array(
        'class' => array('GR_ico', 'sprite', 'linkedin-ico'),
      ),
    )),
  );

  $form['right']['social']['blog'] = array(
    '#type' => 'item',
    '#markup' => l(t("Blog"), 'http://blog.getresponse.com', array(
      'attributes' => array(
        'class' => array('GR_ico', 'sprite', 'blog-ico'),
      ),
    )),
  );

  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save subscription settings') );
  $form['buttons']['submit']['#attributes'] = array('style' =>
      array('display:none'));

  if (!empty($_POST) && !empty($api_key)) {
    unset($_SESSION['messages']);
    drupal_set_message(t('Subscription settings successfully saved.'));
  }

  return $form;
}

/**
 * Implements hook_admin_validate().
 */
function getresponse_admin_validate($form, &$form_state) {

  $current_api_key = variable_get('getresponse_api_key', '');

  if (isset($form_state['values']['getresponse_api_key']) && empty($form_state['values']['getresponse_api_key'])) {
    form_set_error('getresponse_api_key', t("API key can not be empty"));
  }
  else
  {
    $apikey = $form_state['values']['getresponse_api_key'];
    $api = new GetResponse($apikey);
    $webform = null;

    $ping = $api->ping();

    if (isset($ping->code)) {
      variable_del('getresponse_api_key');
      $form_state['values']['getresponse_api_key'] = '';
      form_set_error('getresponse_api_key', t("The API key seems incorrect. Please check if you typed or pasted it correctly. If you recently generated a new key, please make sure you’re using the right one."));
    }
    else {
      variable_set('getresponse_api_key', $apikey);

      if (isset($form_state['values']['getresponse_webformid'])) {

        $webform_id = $form_state['values']['getresponse_webformid'];

        $webform = $api->getForm($webform_id);

        if (!isset($webform->formId)) {
            $webform = $api->getWebform($webform_id);
        }
      }


        if (isset($form_state['values']['getresponse_comment_campaign'])) {
            variable_set('getresponse_comment_campaign', $form_state['values']['getresponse_comment_campaign']);
        }

        if (isset($form_state['values']['getresponse_register_user'])) {
            variable_set('getresponse_register_user',
                $form_state['values']['getresponse_register_user']);
        }

        if (isset($form_state['values']['getresponse_register_campaign'])) {
            variable_set('getresponse_register_campaign',
                $form_state['values']['getresponse_register_campaign']);
        }

        if (isset($form_state['values']['getresponse_register_label'])) {
            variable_set('getresponse_register_label',
                $form_state['values']['getresponse_register_label']);
        }

        if (isset($form_state['values']['getresponse_comment_label'])) {
            variable_set('getresponse_comment_label',
                $form_state['values']['getresponse_comment_label']);
        }

        if (isset($form_state['values']['getresponse_comment_on'])) {
            variable_set('getresponse_comment_on',
                $form_state['values']['getresponse_comment_on']);
        }

        if (isset($form_state['values']['getresponse_webform_on'])) {
            variable_set('getresponse_webform_on',
                $form_state['values']['getresponse_webform_on']);
        }

        if (isset($form_state['values']['getresponse_webformid'])) {
            variable_set('getresponse_webformid',
                $form_state['values']['getresponse_webformid']);
        }

      if ($webform && !empty($webform->scriptUrl)) {
        variable_set('getresponse_webformurl', $webform->scriptUrl);
      }
      else {
        variable_del('getresponse_webformurl');
      }

      if (empty($current_api_key)) {
        drupal_set_message(t('You connected your Drupal to GetResponse.'));
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function getresponse_block_info() {
  $blocks = array();
  $blocks['webform'] = array(
    'info' => t("GetResponse WebForm"),
    'status' => TRUE,
    'region' => 'sidebar_first',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function getresponse_block_view($delta = '') {
  $form_on = variable_get('getresponse_webform_on', 0);
  $webform_url = variable_get('getresponse_webformurl', '');
  $block = array('content' => '');

  if (!empty($webform_url) && $form_on) {
    $block['content'] .= '<noscript>' . t("Please enable JavaScript to use the GetResponse service.") . '</noscript>';
    $block['content'] .= '<script type="text/javascript" src="' . $webform_url . '"></script>';
  }

  return $block;
}

/**
 * Implements hook_form_comment_form_alter().
 */
function getresponse_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $webform_url = variable_get('getresponse_webformurl', '');
  $comment_on = variable_get('getresponse_comment_on', '0');
  $can_enter_email = FALSE;
  if (variable_get('comment_anonymous_' . str_replace('comment_node_', '', $form_state['comment']->node_type), COMMENT_ANONYMOUS_MAYNOT_CONTACT) == COMMENT_ANONYMOUS_MUST_CONTACT) {
    $can_enter_email = TRUE;
  }
  if (!user_is_logged_in() && $comment_on && !empty($webform_url) && $can_enter_email) {
    $form['getresponse_comment_checkbox'] = array(
      '#type' => 'checkbox',
      '#title' => variable_get('getresponse_comment_label', t("Sign up for our newsletter!")),
      '#default_value' => 0,
    );
  }
}

/**
 * Implements hook_comment_insert().
 */
function getresponse_comment_insert($comment) {
  if (!user_is_logged_in()) {
    $api_key = variable_get('getresponse_api_key', '');
    $campaign_id = variable_get('getresponse_comment_campaign', '');
    $comment_on = variable_get('getresponse_comment_on', '0');
    if ($api_key && $campaign_id && $comment_on && !empty($comment->mail) && $comment->getresponse_comment_checkbox) {
      require_once('getresponse-api.class.php');
      $api = new GetResponse($api_key);

      $api->addContact(array(
        'name' => $comment->name,
        'email' => $comment->mail,
        'campaign' => array('campaignId' => $campaign_id),
          'customFieldValues' => array(array(
            'customFieldId' => getresponse_get_origin_custom_id($api_key),
            'value' => array('drupal')
          ))
      ));
    }
  }
}

/**
 * Implements hook_form_user_register_alter().
 *
 * @param $form
 * @param $form_state
 */
function getresponse_form_user_register_form_alter(&$form, &$form_state) {
  $api_key = variable_get('getresponse_api_key', '');
  $campaign_id = variable_get('getresponse_register_campaign', '');
  $register_on = variable_get('getresponse_register_user', 0);

  if (!empty($api_key) && $register_on && !empty($campaign_id)) {
    if (isset($form_state['input']) && isset($form_state['input']['getresponse_comment_checkbox'])) {
      if (isset($form_state['input']['mail']) && !empty($form_state['input']['mail'])) {
        require_once drupal_get_path('module',
            'getresponse') . '/getresponse-api.class.php';
        $api = new GetResponse($api_key);

        $api->addContact(array(
          'name' => $form_state['input']['name'],
          'email' => $form_state['input']['mail'],
          'campaign' => array('campaignId' => $campaign_id),
          'customFieldValues' => array(array(
            'customFieldId' => getresponse_get_origin_custom_id($api_key),
            'value' => array('drupal')
          ))
        ));
      }
    }

    if (!user_is_logged_in()) {
      $form['getresponse_comment_checkbox'] = array(
        '#type' => 'checkbox',
        '#title' => variable_get('getresponse_register_label',
          t('Sign up for our newsletter!')),
        '#default_value' => 0,
      );
    }
  }
}

/**
 * @param string $api_key
 * @return string
 */
function getresponse_get_origin_custom_id($api_key)
{
  $api = new GetResponse($api_key);
  $customs = $api->getCustomFields(array('fields' => 'name'));

  foreach ($customs as $custom) {
    if ($custom->name === 'origin') {
      return $custom->customFieldId;
    }
  }

  $custom = $api->setCustomField(array(
    'name' => 'origin',
    'hidden' => FALSE,
    'type' => 'text',
    'value' => array('drupal')
  ));

  return $custom->customFieldId;
}